crystal_doc_search_index_callback({"repository_name":"wkb","body":"# Well-Known Binary in Crystal\n\n[![Crystal CI](https://github.com/amauryt/crystal-wkb/actions/workflows/crystal.yml/badge.svg)](https://github.com/amauryt/crystal-wkb/actions/workflows/crystal.yml)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://amauryt.github.io/crystal-wkb/)\n[![License](https://img.shields.io/github/license/amauryt/crystal-wkb.svg)](https://github.com/amauryt/crystal-wkb/blob/master/LICENSE)\n\nCrystal library for decoding and encoding the well-known binary (WKB) representation of geometry objects, with limited support for well-known text (WKT) and GeoJSON.\n\nThis library supports the following variations of WKB used for storage of [simple features](https://en.wikipedia.org/wiki/Simple_Features) geometry:\n\n - Standard Well-Known Binary ([WKB](https://libgeos.org/specifications/wkb/#standard-wkb)): limited to XY\n - Extended Well-Known Binary ([EWKB](https://libgeos.org/specifications/wkb/#extended-wkb)) used by [PostGIS](https://postgis.net/): XY, XYZ, XYM, XYZM, with optional SRID\n - ISO 13249-3 Well-Known Binary ([ISO WKB](https://libgeos.org/specifications/wkb/#iso-wkb)): XY, XYZ, XYM, and XYZM\n\nOnly the following seven geometry objects are supported:\n\n  1. Point\n  2. LineString\n  3. Polygon\n  4. MultiPoint\n  5. MultiLineString\n  6. MultiPolygon\n  7. GeometryCollection\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     wkb:\n       github: amauryt/crystal-wkb\n   ```\n\n2. Run `shards install`\n\n3. Require the library\n\n  ```crystal\n    require \"wkb\"\n   ```\n\n### Coordinate Dimension Mode\n\nThe basic element to describe a geometry object is the _coordinate_, whose value is always of type `Float64` in WKB. Coordinates may be 2D (XY), 3D (XYZ, XYM) or 4D (XYZM). The struct `WKB::Position` is a thin wrapper around a `Slice(Float64)` instance to represent a set of coordinate elements. Each position and geometry object has a `WKB::Mode` enum to indicate one of the previous coordinate dimensions. This mode attribute is necessary to disambiguate 3D coordinates (which can be XYZ or XYM) in the methods and serialization of a position or geometry object, and it aids in checking the consistency of composite objects. The default mode is `WKB::Mode::XY`. Independently of their mode, a position and all seven geometry objects could be _empty_. \n\n### WKB Flavor\n\nVariants of WKB and WKT serialization are referred to as _flavors_. The library represents these via the enum `WKB::Flavor`, with the possible values:\n\n  - `Basic`: the default flavor, which follows Standard WKB and is limited to mode `XY`\n  - `Ext`: for EWKB without SRID, usable with all four modes\n  - `ExtSRID`: for EWKB with SRID, usable with all four modes\n  - `ISO`: for ISO WKB, usable with all four modes\n\n## Geometry Structs\n\nPosition and geomety objects SHOULD be considered to be immutable structures. All geometry objects can be directly created with (nested) arrays of `Float64, with the exception of geometry collection; see the examples below. In addition, all geometry objects need a mode (defaults to XY) and a SRID (defaults to 0, a value commonly used to signify that there is no SRID).\n\nThe main library's entitiy is the abstract struct `WKB::Object`, which represents one of the seven supported geometry objects. It has two descendants:\n\n  - `WKB::Geometry`, an abstract struct that comprises the first six geometry objects\n  - `WKB::GeometryCollection`, a special object to contain heterogeneous `WKB::Geometry` objects\n\nAll `WKB::Object` descendants have the following instance methods:\n\n  - `#children` for the child elements of the geometry object, with each having a different child type\n  - `#size` delegated to the object's children\n  - `#empty?` delegated to the object's children\n  - `#mode` for the object's coordinate dimension mode\n  - `#srid` for the object's SRID (spatial reference identifier)\n  - `#has_z?` to check the object's mode for coordinate Z\n  - `#haz_m?` to check the object's mode for coordinate M\n  - `#haz_zm?` to check the object's mode for both Z an M\n  - `#kind` a convenience enum for the object's type\n\nAll `WKB::Geometry` descendants and `WKB::Position` have the method:\n  \n  - `#to_coordinates` to create a (nested) `Float64` array with the respective coordinates\n\n### Position\n\nThe base element to represent coordinates in geometry objects.\n\n```crystal\nposition2D  = WKB::Position.new([1.0, 2.0]) # defaults to WKB::Mode::XY\nposition3Dz = WKB::Position.new([1.0, 2.0, 3.0], WKB::Mode::XYZ)\nposition3Dm = WKB::Position.new([1.0, 2.0, 3.0], WKB::Mode::XYM)\nposition4D  = WKB::Position.new([1.0, 2.0, 3.0, 4.0], WKB::Mode::XYZM)\nposition2D.x # => 1.0\nposition2D.has_z? # => false\nposition.z.nan? # => true\nposition4D.has_zm? # => true\nposition4D.m # => 4.0\nposition_empty = WKB::Point.new([] of Float64)\nposition4D_empty = WKB::Point.new([] of Float64, mode: WKB::Mode::XYZM)\n```\n\n### Point\n\nThe simplest of geometry objects. A `WKB::Point` has a single position to which it delegates most of its methods. The creation and properties of a point are similar to that of a position, but it also has a SRID.\n\n```crystal\npoint2D  = WKB::Point.new([1.0, 2.0])\npoint3D = WKB::Point.new([1.0, 2.0, 3.0], WKB::Mode::XYZ)\npoint2D.position # => WKB::Position(@slice=Slice[1.0, 2.0], @mode=WKB::Mode::XY)\npoint2D.srid # => 0\npoint_with_srid = WKB::Point.new([1.0, 2.0], srid: 4326)\npoint_with_srid.srid # => 4326 \n```\n\nFor consistency with other geometry objects, the method `#children` returns an array with the point's single position, with the latter being possibly empty. Hence, if not empty, the point's `#size` will always be 1.\n\n### LineString\n\nA `WKB::LineString` has an array of positions as children. However trying to create a `WKB::LineString` with a single position will raise `WKB::Error`. For convenience, the struct includes `Indexable(WKB::Position)`.\n\n```crystal\nline_string = WKB::LineString.new([[1.0, 2.0],[3.0, 4.0]])\nline_string.positions.first # => WKB::Position(@slice=Slice[1.0, 2.0], @mode=WKB::Mode::XY)\nline_string.children.first # same\nline_string.first # same\n```\n\n### Polygon\n\nA `WKB::Polygon` has line strings as children, all of which must be _rings_ if not empty (i.e., have a least four positions, with the first and last ones being the same), otherwise a `WKB::Error` will be raised. If not empty, the first line string is the _exterior ring_, and the rest are the _interior rings_.\n\n```crystal\npolygon = WKB::Polygon.new([\n  [\n    [20.0, 30.0],\n    [35.0, 35.0],\n    [30.0, 20.0],\n    [20.0, 30.0]\n  ]\n])\npolygon.line_strings.first # => <WKB::LineString>\npolygon.children.first # same\npolygon.exterior_ring #idem\npolygon.interior_rings # => [] of WKB::LineString\n```\n\n### MultiPoint\n\nA `WKB::MultiPoint` is a multipart object that has points as children.\n\n```crystal\nmulti_point = WKB::MultiPoint.new([\n  [1.0, 2.0],\n  [3.0, 4.0]\n])\nmulti_point.points.first # => <WKB::Point>\nmulti_point.children.first # same\n```\n\n### MultiLineString\n\nA `WKB::MultiLineString` is a multipart object that has line strings as children.\n\n```crystal\nmulti_line_string = WKB::MultiLineString.new([\n  [\n    [20.0, 30.0],\n    [35.0, 35.0],\n    [30.0, 20.0]\n  ]\n])\nmulti_line_string.line_strings.first # => <WKB::LineString>\nmulti_line_string.children.first # same\n```\n\n### MultiPolygon\n\nA `WKB::Polygon` is a multipart object that has polygons as children.\n\n```crystal\nmulti_polygon = WKB::MultiPolygon.new([\n  [\n    [\n      [40.0, 40.0],\n      [20.0, 45.0],\n      [45.0, 30.0],\n      [40.0, 40.0]\n    ]\n  ]\n])\nmulti_polygon.polygons.first # => <WKB::Polygon>\nmulti_polygon.children.first # same\n```\n\n### GeometryCollection\n\nA `WKB::GeometryCollection` is a composite object that has other geometry objects as children. In this library, the children of a geometry collection, if not empty, MUST be heterogenous instances of `WKB::Geometry`. If you need to hold a collection of simple homogeneous geometries, use the respective multipart geometry object.\n\n```crystal\npoint = WKB::Point.new([1.0, 2.0])\nline_string = WKB::LineString.new([[1.0, 2.0],[3.0, 4.0]])\ngeometry_collection = WKB::GeometryCollection.new([point, line_string])\ngeometry_collection.geometries # => <Array(WKB::Geometry)>\ngeometry_collection.children # same\n```\n\n## Serialization\n\nThe main scope of this library is to support encoding and decoding in the aforementioned four flavors of WKB. Support for WKT and GeoJSON is limited to simple but inflexible use cases which may or may not fulfill your specific needs.\n\n### Well-Known Binary\n\nTo encode WKB, create an instance of `WKB::BinEncoder`, which has a flavor (defaults to Standard WKB) and a byte format (defaults to little endian). Remember that Standard WKB can be used only with XY. You can encode into `Bytes` or you can also encode directly into an `IO` instance. Empty points are encoded with coordinates set to `Float64::NAN`, in line with PostGIS and the GEOS C/C++ library.\n\n```crystal\nencoder = WKB::BinEncoder.new\nencoder.flavor # => WKB::Flavor::Basic\nencoder.format # => IO::ByteFormat::LittleEndian\npoint2D = WKB::Point.new([1.0, 2.0])\nbytes = encoder.encode(point2D)\nbytes.hexstring # => \"0101000000000000000000f03f0000000000000040\"\npoint_empty = WKB::Point.new([])\nbytes = encoder.encode(point_empty)\nbytes.hexstring # => \"0101000000000000000000f87f000000000000f87f\"\nio = IO::Memory.new\nencoder.encode(point2D, io)\n\npoint3D = WKB::Point.new([1.0, 2.0, 3.0], WKB::Mode::XYZ)\next_encoder = WKB::BinEncoder.new(WKB::Flavor::Ext)\niso_encoder = WKB::BinEncoder.new(WKB::Flavor::ISO)\nbytes = ext_encoder.encode(point3D)\nbytes.hexstring # => \"0101000080000000000000f03f00000000000000400000000000000840\"\nbytes = iso_encoder.encode(point3D)\nbytes.hexstring # => \"01e9030000000000000000f03f00000000000000400000000000000840\"\n```\n\nIf you want to support encoding the SRID in EWKB only when needed, i.e., with a non-zero value, you'll need two encoders.\n\n```crystal\next_encoder = WKB::BinEncoder.new(WKB::Flavor::Ext)\next_srid_encoder = WKB::BinEncoder.new(WKB::Flavor::ExtSRID)\n\ndef encode_ewkb_with_optional_srid(object : WKB::Object) : Bytes\n  if object.srid.zero?\n    ext_encoder.encode(object)\n  else\n    ext_srid_encoder.encode(object)\n  end\nend\n```\n\nTo decode a `WKB::Object`, create an instance of `WKB::BinDecoder`; it automatically decodes all supported flavors and both byte formats, and you can set a default SRID. You can decode from `Bytes`, from an `IO` instance, or from a `String` hexadecimal representation of the binary geometry object.\n\nIf you need to work with a specific type of `WKB::Object` you can: (1) use the `#is_a?` pseudo-method for safe use within an _if block_; (2) cast the object, optionally using the object's `#kind` method to check before casting.\n\n```crystal\ndecoder = WKB::BinDecoder.new\npoint_wkb_str = \"0101000000000000000000f03f0000000000000040\"\nobject = decoder.decode(point_wkb_str) # => <WKB::Object+>\nobject.empty? # => false\n\n# Desired type known at compile time, if true it's safe to use point methods\nif object.is_a?(WKB::Point) \n  object.x # => 1.0\nend\n\n# For more dynamic scenarios we can verify kind and then safely cast\nobject.kind.point? # => true\npoint = object.as(WKB::Point) \npoint.x # => 1.0\n\n# Sometimes it's better to use the more generic struct\nobject.kind.geometry? # => true\ngeometry = object.as(WKB::Geometry)\ngeometry.to_coordinates # => [1.0, 2.0] \n\nencoder = WKB::BinEncoder.new\nio = IO::Memory.new\nencoder.encode(point, io)\nio.rewind\nanother_point = decoder.decode(io).as(WKB::Point)\nanother_point == point # => true\n\npoint.srid # => 0\ndecoder = WKB::BinDecoder.new(default_srid = 4326)\ndecoder.decode(point_wkb_str).srid # => 4326\n```\n\n### Well-Known Text\n\nWKT is a commonly-used and human-readable representation of geometry objects. This library's support for encoding and decoding WKT is limited, however. In particular, there is no float precision control on encoding, and decoding 3D and 4D geometries in EWKT (used by PostGIS) is not supported, but the respective encoding in EWKT is supported. ISO WKT is better supported.\n\nTo encode WKT, create an instance of `WKB::TextEncoder`, which has a flavor (defaults to Standard WKT). You can encode to a `String` or into an `IO` instance. For optional SRID encoding in EWKT adapt the example for WKB.\n\n```crystal\nencoder = WKB::TextEncoder.new\nencoder.flavor # => WKB::Flavor::Basic\npoint2D = WKB::Point.new([1.0, 2.0])\nencoder.encode(point2D) # => \"POINT(1.0 2.0)\"\nio = IO::Memory.new\nencoder.encode(point2D)\n\npoint3D = WKB::Point.new([1.0, 2.0, 3.0], WKB::Mode::XYZ)\next_encoder = WKB::TextEncoder.new(WKB::Flavor::Ext)\next_srid_encoder = WKB::TextEncoder.new(WKB::Flavor::ExtSRID)\niso_encoder = WKB::TextEncoder.new(WKB::Flavor::ISO)\next_encoder.encode(point3D) # => \"POINT(1.0 2.0 3.0)\next_srid_encoder.encode(point3D) # => \"SRID=0;POINT(1.0 2.0 3.0)\"\niso_encoder.encode(point3D) # => \"POINT Z(1.0 2.0 3.0)\"\n```\n\nTo decode WKT, create an instance of `WKB::TextDecoder`, for which you can set a default SRID. You can decode only from a `String` instance. The same casting restrictions as decoding WKB apply.\n\n```crystal\ndecoder = WKB::TextDecoder.new\npoint_wkt_str = \"POINT Z(1.0 2.0 3.0)\"\nobject = decoder.decode(point_wkt_str) # => <WKB::Object+>\nobject.empty? # => false\nobject.mode.xyz? # => true\nif object.is_a?(WKB::Geometry)\n  object.to_coordinates # => [1.0, 2.0, 3.0]\nend\nobject.kind.point? # => true\npoint = object.as(WKB::Point)\npoint.z # => 3.0\ndecoder = WKB::TextDecoder.new(default_srid = 4326)\ndecoder.decode(point_wkt_str).srid # => 4326\n```\n\n### GeoJSON\n\nThis library provides an optional extension to consume and (efficiently) produce a subset of GeoJSON. Only the above seven geometry objects are supported. GeoJSON's Feature and Feature Collection are not supported. In addition, no foreign properties are supported and parsing is case and order sensitive. \n\nBy default, all 3D coordinates are XYZ; four or more coordinates are not supported by GeoJSON. Empty objects are supported, with their mode set to XY. Mixing empty objects with other 3D object within composite objects will raise a `WKB::Error`.\n\nYou'll need to load the extension after the library. This will load Crystal's JSON module and add `.from_json` and `#to_json` to positions and geometry objects, together with their JSON-related methods.\n\n```crystal\nrequire \"wkb\"\nrequire \"wkb/geojson\"\n\npoint2D = WKB::Point.new([1.0, 2.0])\n\npoint2D_json = point2D.to_json\npoint2D_json # => \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.0,2.0]}\"\nanother_point2D = WKB::Point.from_json(point2D_json)\nanother_point2D == point2D # => true\n\npoint2D.position.to_json # => \"[1.0,2.0]\"\n\npoint3D_json = \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.0,2.0,3.0]}\"\nobject = WKB::Object.from_json(point3D_json)\nobject.kind.point? # => true\npoint3D = object.as(WKB::Point)\npoint3D.mode.xyz? # => true\n\nWKB::Point.new([] of Float64).to_json # => \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[]}\"\n```\n\nIf you need more GeoJSON features I suggest using the following library by [@mamantoha](https://github.com/mamantoha):\n\n  * https://github.com/geocrystal/geojson\n\nUsing both libraries, going from WKB to GeoJSON is straightforward; viceversa less so.\n\n```crystal\nrequire \"wkb\"\nrequire \"geojson\"\n\nwkb_line_string = WKB::LineString.new([[1.0, 2.0], [4.0, 5.0]])\ngjo_line_string = GeoJSON::LineString.new(wkb_line_string.to_coordinates)\n\nwkb_polygon = WKB::Polygon.new([\n  [\n    [20.0, 30.0],\n    [35.0, 35.0],\n    [30.0, 20.0],\n    [20.0, 30.0]\n  ]\n])\ngjo_polygon = GeoJSON::Polygon.new(wkb_polygon.to_coordinates)\n\n\npoint_json = \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.0,2.0]}\"\nmulti_point_json = \"{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[1.0,2.0],[3.0,4.0]]}\"\n\n# \"geojson\" uses the class `GeoJSON::Coordinates` as the basis for the `coordinates`\n#   property of all of its geometry objects, class which itself wraps an `Array(Float64)`\n#   in a property called `coordinates`.\n\n#  Here we need to call two times `#coordinates`.\ngjo_point = GeoJSON::Point.from_json(point_json)\nwkb_point = WKB::Point.new(gjo_point.coordinates.coordinates)\n\n#  Here we need to map the array of `GeoJSON::Coordinates`.\ngjo_multi_point = GeoJSON::MultiPoint.from_json(multi_point_json)\nwkb_multi_point = WKB::Point.new(gjo_multi_point.coordinates.map(&.coordinates))\n```\n\nGiven that the extension is optional, you could also implement your own (Geo)JSON serialization.\n\n## Geometries on a Database\n\nThis library can be used to communicate with any system that implements WKB, including many database engines. In that case, you can either work at the bytes level doing the conversion yourself, or use  converters for `WKB::Object` and all its descendants for easier reading with `DB::Serializable` from `crystal-db`.\n\nBelow is a full example to receive and transmit geometry data from and to PostGIS using [crystal-pg](https://github.com/will/crystal-pg), the Postgres driver for [crystal-db](https://github.com/crystal-lang/crystal-db).\n\n```crystal\nrequire \"db\"\nrequire \"pg\"\nrequire \"wkb\"\nrequire \"wkb/geojson\" # For GeoJSON support\nrequire \"wkb/db\" # For `DB::Serializable` support. Must be loaded after \"db\"!\n\ndecoder = WKB::BinDecoder.new\nencoder = WKB::BinEncoder.new(WKB::Flavor::Ext) # or `ExtSRID` if you use SRID\n\npolygon_json = <<-JSON\n  {\n    \"type\": \"Polygon\", \n    \"coordinates\": [\n      [\n          [35.0, 10.0],\n          [45.0, 45.0],\n          [15.0, 40.0],\n          [10.0, 20.0],\n          [35.0, 10.0]\n      ]\n    ]\n  }\nJSON\n\nclass Place\n  include DB::Serializable\n\n  property name : String\n\n  @[DB::Field(converter: WKB::DB::PointConverter)]\n  property location : WKB::Point\nend\n\nDB.open(\"postgres://user:password@host:port/db_name\") do |db|\n  point_bytes = db.scalar(\"SELECT 'POINT(1 2 3)'::GEOMETRY;\").as(Bytes)\n  point = decoder.decode(point_bytes).as(WKB::Point)\n  point.z # => 3.0\n  point.to_json # => \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.0,2.0,3.0]}\n\n  line_string = WKB::LineString.new([[1.0, 2.0], [3.0, 4.0]])\n  line_string_bytes = encoder.encode(line_string)\n  num_points = db.scalar(\"SELECT ST_NumPoints($1::GEOMETRY)\", line_string_bytes).as(Int32)\n  num_points # => 2\n\n  polygon = WKB::Polygon.from_json(polygon_json)\n  polygon_bytes = encoder.encode(polygon)\n  polygon_perimeter = db.scalar(\"SELECT ST_Perimeter($1::GEOMETRY)\", polygon_bytes).as(Float64)\n  polygon_perimeter # => 114.35571426165451\n\n  query_str = \"SELECT 'Neverland' AS name, 'POINT(1 2)'::GEOMETRY AS location\"\n  places = Place.from_rs(db.query(query_str))\n  places.first.location.x # => 1.0\nend\n```\n\nPlease note the casting to `GEOMETRY` within PostGIS functions. Data is sent as `BYTEA`, and I've found that some functions accept the binary as is, while others expect a `GEOMETRY` datatype. I suggest to always cast.\nUnfortunately, and as far as I'm aware, in `crystal-pg` at the moment there is no support for custom types with dynamic OIDs such as those in PostGIS, hence the above casting seems unavoidable.\n\n### Use with ORMs\n\nPerhaps the ORM or framework of your choice supports creating custom fields when working with a database. This is the case of [Marten](https://martenframework.com/) with its [custom model fields](https://martenframework.com/docs/models-and-databases/how-to/create-custom-model-fields) and [Lucky](https://luckyframework.org/) via the non-documented extensions for [Avram](https://github.com/luckyframework/avram).\n\n#### Lucky's Avram\n\nBelow just an example of creating an extension for Lucky's Avram to work with PostGIS. In this case we only support the generic `WKB::Object`, but you can be more specific if desired.\n\n```crystal\nabstract struct WKB::Object\n  def self.adapter\n    Lucky\n  end\n\n  module Lucky\n    @@bin_decoder = WKB::BinDecoder.new\n    @@bin_encoder = WKB::BinEncoder.new\n    @@text_decoder = WKB::TextDecoder.new\n    @@text_encoder = WKB::TextEncoder.new\n\n    alias ColumnType = Bytes # The base type of `WKB::Object` for our Postgres driver\n    include Avram::Type\n\n    def self.criteria(query : T, column) forall T\n      Criteria(T, Bytes).new(query, column)\n    end\n\n    def from_db!(value : Bytes)\n      @@bin_decoder.decode(value)\n    end\n\n    def parse(value : WKB::Object)\n      SuccessfulCast(WKB::Object).new(value)\n    end\n\n    def parse(value : Bytes)\n      object = @@bin_decoder.decode(value)\n      SuccessfulCast(WKB::Object).new(object)\n    rescue\n      FailedCast.new\n    end\n\n    def parse(value : String)\n      object = @@text_decoder.decode(value).as(WKB::Object)\n      SuccessfulCast(WKB::Object).new(object)\n    rescue\n      FailedCast.new\n    end\n\n    def to_db(value : WKB::Object)\n      @@text_encoder.encode(value)\n    end\n\n    class Criteria(T, V) < Avram::Criteria(T, V)\n    end\n  end\nend\n\n# The following is needed to add support for `WKB::Object` in migrations\nmodule Avram::Migrator::Columns\n  module WKB\n    class ObjectColumn(T) < Base\n      @default : T | Nil = nil\n\n      def initialize(@name, @nilable, @default)\n      end\n\n      # The datatype \"geometry is encoded as EWKB and it's the most used datatype in PostGIS.\n      #   Another possible value is \"geography\", useful when working on a global scale.\n      #   See: https://postgis.net/workshops/postgis-intro/geography.html\n      def column_type : String\n        \"geometry\" \n      end\n    end\n  end\nend\n```\n\nRemember to load your extension where appropriate in your Lucky's `app.cr`. For instance, you could create a folder `src/charms` to gather all Avram extensions and require it after your shards and before your models, like so:\n\n```crystal\nrequire \"./shards\"\n\nrequire \"../config/server\"\nrequire \"./app_database\"\nrequire \"../config/**\"\nrequire \"./charms/**\" # Our WKB extension for Avram's lucky is within this folder\nrequire \"./models/base_model\"\n# Rest of \"require\"\n```\n\nNow you can create migrations like this one:\n\n```crystal\nclass CreatePlace::V00000000000001 < Avram::Migrator::Migration::V1\n  def migrate\n    create table_for(Place) do\n      primary_key id : Int64\n      add_timestamps\n      add name : String\n      add location : WKB::Object # We can use `WKB::Object` for datatype \"geometry\"\n    end\n  end\n\n  def rollback\n    drop table_for(Place)\n  end\nend\n```\n\nFor the respective model:\n\n```crystal\nclass Place < BaseModel\n  # columns for primary key and timestamps are already included by default\n  table do\n    column name : String\n    column location : WKB::Object\n  end\nend\n```\n\nYou can further customize your extension(s) to support only specific types or other encodings, such as including the SRID or making it optional.\n\nFor instance, to only support `WKB::Point` you would need to cast as necessary while parsing `Bytes` or `String` in the respective `Lucky` module:\n\n```crystal\n  def parse(value : Bytes)\n    object = @@bin_decoder.decode(value)\n    if object.kind.point?\n      SuccessfulCast(WKB::Point).new(object.as(WKB::Point))\n    else\n      raise \"Not a valid Point\"\n    end\n  rescue\n    FailedCast.new\n  end\n```\n\nRemember to also adapt as necessary the column type for Avram migrations:\n\n```crystal\n  def column_type : String\n    # Accept only Points with default PostGIS SRID set 4326, the same as GeoJSON.\n    \"geometry(point, 4326)\" \n  end\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/crystal-wkb/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Amaury Trujillo](https://github.com/amauryt) - creator and maintainer\n","program":{"html_id":"wkb/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"wkb","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"wkb/WKB","path":"WKB.html","kind":"module","full_name":"WKB","name":"WKB","abstract":false,"locations":[{"filename":"src/wkb.cr","line_number":19,"url":null},{"filename":"src/wkb/bin_decoder.cr","line_number":3,"url":null},{"filename":"src/wkb/bin_encoder.cr","line_number":4,"url":null},{"filename":"src/wkb/db.cr","line_number":3,"url":null},{"filename":"src/wkb/error.cr","line_number":1,"url":null},{"filename":"src/wkb/flavor.cr","line_number":1,"url":null},{"filename":"src/wkb/geojson.cr","line_number":3,"url":null},{"filename":"src/wkb/geometry.cr","line_number":3,"url":null},{"filename":"src/wkb/geometry_collection.cr","line_number":3,"url":null},{"filename":"src/wkb/line_string.cr","line_number":3,"url":null},{"filename":"src/wkb/line_string_sequenceable.cr","line_number":4,"url":null},{"filename":"src/wkb/mode.cr","line_number":1,"url":null},{"filename":"src/wkb/multi_line_string.cr","line_number":3,"url":null},{"filename":"src/wkb/multi_point.cr","line_number":3,"url":null},{"filename":"src/wkb/multi_polygon.cr","line_number":3,"url":null},{"filename":"src/wkb/object.cr","line_number":3,"url":null},{"filename":"src/wkb/object_kind.cr","line_number":1,"url":null},{"filename":"src/wkb/point.cr","line_number":4,"url":null},{"filename":"src/wkb/polygon.cr","line_number":3,"url":null},{"filename":"src/wkb/position.cr","line_number":3,"url":null},{"filename":"src/wkb/text_decoder.cr","line_number":5,"url":null},{"filename":"src/wkb/text_encoder.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /__w/crystal-wkb/crystal-wkb/src`).chomp.stringify }}"}],"types":[{"html_id":"wkb/WKB/BinDecoder","path":"WKB/BinDecoder.html","kind":"class","full_name":"WKB::BinDecoder","name":"BinDecoder","abstract":false,"superclass":{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/bin_decoder.cr","line_number":10,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Binary decoder of well-known representations of geometry objects (WKB).\n\nDecoding of all supported flavors is automatic.\n\nNOTE: All `#decode` metods raise  a `WKB::Error` if there was a\ndecoding error, and IO error, or if the geometry object is not valid.","summary":"<p>Binary decoder of well-known representations of geometry objects (WKB).</p>","constructors":[{"html_id":"new(default_srid:Int32=0)-class-method","name":"new","abstract":false,"args":[{"name":"default_srid","default_value":"0","external_name":"default_srid","restriction":"::Int32"}],"args_string":"(default_srid : Int32 = 0)","args_html":"(default_srid : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/bin_decoder.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"default_srid","default_value":"0","external_name":"default_srid","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(default_srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"decode(io:IO):Object-instance-method","name":"decode","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Object","args_html":"(io : IO) : <a href=\"../WKB/Object.html\">Object</a>","location":{"filename":"src/wkb/bin_decoder.cr","line_number":23,"url":null},"def":{"name":"decode","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Object","visibility":"Public","body":"begin\n  @mutex.synchronize do\n    @io = io\n    @main_mode = Mode::XY\n    @main_srid = 0\n    @main_children_count = 0\n    read_single_object(nil)\n  end\nrescue ex : IO::Error\n  raise(WKB::DecodeError.new(ex.message))\nend"}},{"html_id":"decode(data:Bytes):Object-instance-method","name":"decode","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"Bytes"}],"args_string":"(data : Bytes) : Object","args_html":"(data : Bytes) : <a href=\"../WKB/Object.html\">Object</a>","location":{"filename":"src/wkb/bin_decoder.cr","line_number":36,"url":null},"def":{"name":"decode","args":[{"name":"data","external_name":"data","restriction":"Bytes"}],"return_type":"Object","visibility":"Public","body":"decode(IO::Memory.new(data, writable = false))"}},{"html_id":"decode(data:String):Object-instance-method","name":"decode","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"String"}],"args_string":"(data : String) : Object","args_html":"(data : String) : <a href=\"../WKB/Object.html\">Object</a>","location":{"filename":"src/wkb/bin_decoder.cr","line_number":40,"url":null},"def":{"name":"decode","args":[{"name":"data","external_name":"data","restriction":"String"}],"return_type":"Object","visibility":"Public","body":"decode(data.hexbytes)"}},{"html_id":"default_srid:Int32-instance-method","name":"default_srid","abstract":false,"location":{"filename":"src/wkb/bin_decoder.cr","line_number":18,"url":null},"def":{"name":"default_srid","visibility":"Public","body":"@default_srid"}}]},{"html_id":"wkb/WKB/BinEncoder","path":"WKB/BinEncoder.html","kind":"class","full_name":"WKB::BinEncoder","name":"BinEncoder","abstract":false,"superclass":{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/bin_encoder.cr","line_number":6,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Binary encoder of well-known representations of geometry objects (WKB).","summary":"<p>Binary encoder of well-known representations of geometry objects (WKB).</p>","constructors":[{"html_id":"new(flavor:WKB::Flavor=Flavor::Basic,format:IO::ByteFormat=IO::ByteFormat::LittleEndian)-class-method","name":"new","abstract":false,"args":[{"name":"flavor","default_value":"Flavor::Basic","external_name":"flavor","restriction":"::WKB::Flavor"},{"name":"format","default_value":"IO::ByteFormat::LittleEndian","external_name":"format","restriction":"::IO::ByteFormat"}],"args_string":"(flavor : WKB::Flavor = Flavor::Basic, format : IO::ByteFormat = IO::ByteFormat::LittleEndian)","args_html":"(flavor : <a href=\"../WKB/Flavor.html\">WKB::Flavor</a> = <span class=\"t\">Flavor</span><span class=\"t\">::</span><span class=\"t\">Basic</span>, format : IO::ByteFormat = <span class=\"t\">IO</span><span class=\"t\">::</span><span class=\"t\">ByteFormat</span><span class=\"t\">::</span><span class=\"t\">LittleEndian</span>)","location":{"filename":"src/wkb/bin_encoder.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"flavor","default_value":"Flavor::Basic","external_name":"flavor","restriction":"::WKB::Flavor"},{"name":"format","default_value":"IO::ByteFormat::LittleEndian","external_name":"format","restriction":"::IO::ByteFormat"}],"visibility":"Public","body":"_ = allocate\n_.initialize(flavor, format)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"encode(object:Object,io:IO):Nil-instance-method","name":"encode","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Object"},{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(object : Object, io : IO) : Nil","args_html":"(object : <a href=\"../WKB/Object.html\">Object</a>, io : IO) : Nil","location":{"filename":"src/wkb/bin_encoder.cr","line_number":18,"url":null},"def":{"name":"encode","args":[{"name":"object","external_name":"object","restriction":"Object"},{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io.write_byte(@format_byte)\nwrite_single_object(io, object)\n"}},{"html_id":"encode(object:Object):Bytes-instance-method","name":"encode","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Object"}],"args_string":"(object : Object) : Bytes","args_html":"(object : <a href=\"../WKB/Object.html\">Object</a>) : Bytes","location":{"filename":"src/wkb/bin_encoder.cr","line_number":23,"url":null},"def":{"name":"encode","args":[{"name":"object","external_name":"object","restriction":"Object"}],"return_type":"Bytes","visibility":"Public","body":"io = IO::Memory.new\nio.write_byte(@format_byte)\nwrite_single_object(io, object)\nio.to_slice\n"}},{"html_id":"flavor:Flavor-instance-method","name":"flavor","abstract":false,"location":{"filename":"src/wkb/bin_encoder.cr","line_number":11,"url":null},"def":{"name":"flavor","return_type":"Flavor","visibility":"Public","body":"@flavor"}},{"html_id":"format:IO::ByteFormat-instance-method","name":"format","abstract":false,"location":{"filename":"src/wkb/bin_encoder.cr","line_number":12,"url":null},"def":{"name":"format","return_type":"IO::ByteFormat","visibility":"Public","body":"@format"}}]},{"html_id":"wkb/WKB/DB","path":"WKB/DB.html","kind":"module","full_name":"WKB::DB","name":"DB","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":23,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"This module offers convenience converters when working with\n`DB::Serializable` from [crystal-db](https://github.com/crystal-lang/crystal-db).\n\nExample:\n```\nrequire \"db\"\nrequire \"my_db_driver\"\nrequire \"wkb\"\nrequire \"wkb/db\"\n\nclass MyClass\n  include DB::Serializable\n\n  property name : String\n\n  @[DB::Field(converter: WKB::DB::ObjectConverter)]\n  property geometry : WKB::Object\nend\n```","summary":"<p>This module offers convenience converters when working with <code>DB::Serializable</code> from <a href=\"https://github.com/crystal-lang/crystal-db\">crystal-db</a>.</p>","types":[{"html_id":"wkb/WKB/DB/GeometryCollectionConverter","path":"WKB/DB/GeometryCollectionConverter.html","kind":"module","full_name":"WKB::DB::GeometryCollectionConverter","name":"GeometryCollectionConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::GeometryCollection)"}}]},{"html_id":"wkb/WKB/DB/GeometryConverter","path":"WKB/DB/GeometryConverter.html","kind":"module","full_name":"WKB::DB::GeometryConverter","name":"GeometryConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::Geometry)"}}]},{"html_id":"wkb/WKB/DB/LineStringConverter","path":"WKB/DB/LineStringConverter.html","kind":"module","full_name":"WKB::DB::LineStringConverter","name":"LineStringConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::LineString)"}}]},{"html_id":"wkb/WKB/DB/MultiLineStringConverter","path":"WKB/DB/MultiLineStringConverter.html","kind":"module","full_name":"WKB::DB::MultiLineStringConverter","name":"MultiLineStringConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::MultiLineString)"}}]},{"html_id":"wkb/WKB/DB/MultiPointConverter","path":"WKB/DB/MultiPointConverter.html","kind":"module","full_name":"WKB::DB::MultiPointConverter","name":"MultiPointConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::MultiPoint)"}}]},{"html_id":"wkb/WKB/DB/MultiPolygonConverter","path":"WKB/DB/MultiPolygonConverter.html","kind":"module","full_name":"WKB::DB::MultiPolygonConverter","name":"MultiPolygonConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::MultiPolygon)"}}]},{"html_id":"wkb/WKB/DB/ObjectConverter","path":"WKB/DB/ObjectConverter.html","kind":"module","full_name":"WKB::DB::ObjectConverter","name":"ObjectConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::Object)"}}]},{"html_id":"wkb/WKB/DB/PointConverter","path":"WKB/DB/PointConverter.html","kind":"module","full_name":"WKB::DB::PointConverter","name":"PointConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::Point)"}}]},{"html_id":"wkb/WKB/DB/PolygonConverter","path":"WKB/DB/PolygonConverter.html","kind":"module","full_name":"WKB::DB::PolygonConverter","name":"PolygonConverter","abstract":false,"locations":[{"filename":"src/wkb/db.cr","line_number":24,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB/DB","kind":"module","full_name":"WKB::DB","name":"DB"},"class_methods":[{"html_id":"from_rs(rs:::DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : ::DB::ResultSet)","args_html":"(rs : ::DB::ResultSet)","location":{"filename":"src/wkb/db.cr","line_number":24,"url":null},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"(@@decoder.decode(rs.read(Bytes))).as(WKB::Polygon)"}}]}]},{"html_id":"wkb/WKB/DecodeError","path":"WKB/DecodeError.html","kind":"class","full_name":"WKB::DecodeError","name":"DecodeError","abstract":false,"superclass":{"html_id":"wkb/WKB/Error","kind":"class","full_name":"WKB::Error","name":"Error"},"ancestors":[{"html_id":"wkb/WKB/Error","kind":"class","full_name":"WKB::Error","name":"Error"},{"html_id":"wkb/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/error.cr","line_number":5,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"}},{"html_id":"wkb/WKB/EncodeError","path":"WKB/EncodeError.html","kind":"class","full_name":"WKB::EncodeError","name":"EncodeError","abstract":false,"superclass":{"html_id":"wkb/WKB/Error","kind":"class","full_name":"WKB::Error","name":"Error"},"ancestors":[{"html_id":"wkb/WKB/Error","kind":"class","full_name":"WKB::Error","name":"Error"},{"html_id":"wkb/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/error.cr","line_number":8,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"}},{"html_id":"wkb/WKB/Error","path":"WKB/Error.html","kind":"class","full_name":"WKB::Error","name":"Error","abstract":false,"superclass":{"html_id":"wkb/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"wkb/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/error.cr","line_number":2,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"wkb/WKB/DecodeError","kind":"class","full_name":"WKB::DecodeError","name":"DecodeError"},{"html_id":"wkb/WKB/EncodeError","kind":"class","full_name":"WKB::EncodeError","name":"EncodeError"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"}},{"html_id":"wkb/WKB/Flavor","path":"WKB/Flavor.html","kind":"enum","full_name":"WKB::Flavor","name":"Flavor","abstract":false,"ancestors":[{"html_id":"wkb/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wkb/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/flavor.cr","line_number":3,"url":null}],"repository_name":"wkb","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Basic","name":"Basic","value":"0","doc":"Basic standard with support only for XY.","summary":"<p>Basic standard with support only for XY.</p>"},{"id":"Ext","name":"Ext","value":"1","doc":"Extended flavor used by PostGIS without SRID.","summary":"<p>Extended flavor used by PostGIS without SRID.</p>"},{"id":"ExtSRID","name":"ExtSRID","value":"2","doc":"Extended flavor used by PostGIS witht SRID.","summary":"<p>Extended flavor used by PostGIS witht SRID.</p>"},{"id":"ISO","name":"ISO","value":"3","doc":"Higher-dimensional standard as defined in ISO 13249-3","summary":"<p>Higher-dimensional standard as defined in ISO 13249-3</p>"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Serialization flavors of Well-Known Binary and Well-Known Text.","summary":"<p>Serialization flavors of Well-Known Binary and Well-Known Text.</p>","instance_methods":[{"html_id":"basic?-instance-method","name":"basic?","abstract":false,"location":{"filename":"src/wkb/flavor.cr","line_number":5,"url":null},"def":{"name":"basic?","visibility":"Public","body":"self == Basic"}},{"html_id":"ext?-instance-method","name":"ext?","abstract":false,"location":{"filename":"src/wkb/flavor.cr","line_number":7,"url":null},"def":{"name":"ext?","visibility":"Public","body":"self == Ext"}},{"html_id":"ext_srid?-instance-method","name":"ext_srid?","abstract":false,"location":{"filename":"src/wkb/flavor.cr","line_number":9,"url":null},"def":{"name":"ext_srid?","visibility":"Public","body":"self == ExtSRID"}},{"html_id":"iso?-instance-method","name":"iso?","abstract":false,"location":{"filename":"src/wkb/flavor.cr","line_number":11,"url":null},"def":{"name":"iso?","visibility":"Public","body":"self == ISO"}}]},{"html_id":"wkb/WKB/Geometry","path":"WKB/Geometry.html","kind":"struct","full_name":"WKB::Geometry","name":"Geometry","abstract":true,"superclass":{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},"ancestors":[{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":88,"url":null},{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/geometry.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"wkb/WKB/LineString","kind":"struct","full_name":"WKB::LineString","name":"LineString"},{"html_id":"wkb/WKB/MultiLineString","kind":"struct","full_name":"WKB::MultiLineString","name":"MultiLineString"},{"html_id":"wkb/WKB/MultiPoint","kind":"struct","full_name":"WKB::MultiPoint","name":"MultiPoint"},{"html_id":"wkb/WKB/MultiPolygon","kind":"struct","full_name":"WKB::MultiPolygon","name":"MultiPolygon"},{"html_id":"wkb/WKB/Point","kind":"struct","full_name":"WKB::Point","name":"Point"},{"html_id":"wkb/WKB/Polygon","kind":"struct","full_name":"WKB::Polygon","name":"Polygon"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(Geometry)"}}],"instance_methods":[{"html_id":"to_coordinates-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as a nested array.","summary":"<p>Returns a representation of coordinates as a nested array.</p>","abstract":true,"location":{"filename":"src/wkb/geometry.cr","line_number":6,"url":null},"def":{"name":"to_coordinates","visibility":"Public","body":""}},{"html_id":"to_json(builder:JSON::Builder):Nil-instance-method","name":"to_json","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder) : Nil","args_html":"(builder : JSON::Builder) : Nil","location":{"filename":"src/wkb/geojson.cr","line_number":90,"url":null},"def":{"name":"to_json","args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"return_type":"Nil","visibility":"Public","body":"builder.object do\n  builder.string(\"type\")\n  builder.string(kind.to_s)\n  builder.string(\"coordinates\")\n  if self.is_a?(Point)\n    self.position.to_json(builder)\n  else\n    if self.is_a?(LineString)\n      builder.array do\n        self.positions.each do |p|\n          p.to_json(builder)\n        end\n      end\n    else\n      if self.is_a?(Polygon) || self.is_a?(MultiLineString)\n        builder.array do\n          self.line_strings.each do |line_string|\n            builder.array do\n              line_string.positions.each do |p|\n                p.to_json(builder)\n              end\n            end\n          end\n        end\n      else\n        if self.is_a?(MultiPoint)\n          builder.array do\n            self.points.each do |point|\n              point.position.to_json(builder)\n            end\n          end\n        else\n          if self.is_a?(MultiPolygon)\n            builder.array do\n              self.polygons.each do |polygon|\n                builder.array do\n                  polygon.line_strings.each do |line_string|\n                    builder.array do\n                      line_string.positions.each do |p|\n                        p.to_json(builder)\n                      end\n                    end\n                  end\n                end\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"}}]},{"html_id":"wkb/WKB/GeometryCollection","path":"WKB/GeometryCollection.html","kind":"struct","full_name":"WKB::GeometryCollection","name":"GeometryCollection","abstract":false,"superclass":{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},"ancestors":[{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":132,"url":null},{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/geometry_collection.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(geometries:Array(Geometry),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"geometries","external_name":"geometries","restriction":"Array(Geometry)"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(geometries : Array(Geometry), mode = Mode::XY, srid = 0)","args_html":"(geometries : Array(<a href=\"../WKB/Geometry.html\">Geometry</a>), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/geometry_collection.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"geometries","external_name":"geometries","restriction":"Array(Geometry)"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(geometries, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(GeometryCollection)"}}],"instance_methods":[{"html_id":"children:Array(WKB::Geometry)-instance-method","name":"children","doc":"Returns the object's child entities as an array.","summary":"<p>Returns the object's child entities as an array.</p>","abstract":false,"location":{"filename":"src/wkb/geometry_collection.cr","line_number":15,"url":null},"def":{"name":"children","visibility":"Public","body":"@geometries"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if the object has no children.","summary":"<p>Returns <code>true</code> if the object has no children.</p>","abstract":false,"location":{"filename":"src/wkb/geometry_collection.cr","line_number":23,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@geometries.empty?"}},{"html_id":"geometries:Array(Geometry)-instance-method","name":"geometries","abstract":false,"location":{"filename":"src/wkb/geometry_collection.cr","line_number":5,"url":null},"def":{"name":"geometries","return_type":"Array(Geometry)","visibility":"Public","body":"@geometries"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/geometry_collection.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::GeometryCollection"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the size of the object's children.","summary":"<p>Returns the size of the object's children.</p>","abstract":false,"location":{"filename":"src/wkb/geometry_collection.cr","line_number":19,"url":null},"def":{"name":"size","visibility":"Public","body":"@geometries.size"}},{"html_id":"to_json(builder:JSON::Builder):Nil-instance-method","name":"to_json","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder) : Nil","args_html":"(builder : JSON::Builder) : Nil","location":{"filename":"src/wkb/geojson.cr","line_number":134,"url":null},"def":{"name":"to_json","args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"return_type":"Nil","visibility":"Public","body":"builder.object do\n  builder.string(\"type\")\n  builder.string(kind.to_s)\n  builder.string(\"geometries\")\n  geometries.to_json(builder)\nend"}}]},{"html_id":"wkb/WKB/LineString","path":"WKB/LineString.html","kind":"struct","full_name":"WKB::LineString","name":"LineString","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"wkb/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"wkb/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/line_string.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wkb/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(coordinates_array:Array(Array(Float64)),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"coordinates_array","external_name":"coordinates_array","restriction":"Array(Array(Float64))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(coordinates_array : Array(Array(Float64)), mode = Mode::XY, srid = 0)","args_html":"(coordinates_array : Array(Array(Float64)), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/line_string.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"coordinates_array","external_name":"coordinates_array","restriction":"Array(Array(Float64))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates_array, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(LineString)"}}],"instance_methods":[{"html_id":"children:Array(WKB::Position)-instance-method","name":"children","doc":"Returns the object's child entities as an array.","summary":"<p>Returns the object's child entities as an array.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":29,"url":null},"def":{"name":"children","visibility":"Public","body":"@positions"}},{"html_id":"closed?-instance-method","name":"closed?","doc":"Returns `true` if empty or the first child position is equal to the last one.","summary":"<p>Returns <code>true</code> if empty or the first child position is equal to the last one.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":46,"url":null},"def":{"name":"closed?","visibility":"Public","body":"@positions.empty? || (@positions.first == @positions.last)"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if `self` is empty, `false` otherwise.\n\n```\n([] of Int32).empty? # => true\n([1]).empty?         # => false\n```","summary":"<p>Returns <code>true</code> if <code>self</code> is empty, <code>false</code> otherwise.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":37,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@positions.empty?"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::LineString"}},{"html_id":"open?-instance-method","name":"open?","doc":"Returns the opposite of `#closed?`.","summary":"<p>Returns the opposite of <code><a href=\"../WKB/LineString.html#closed%3F-instance-method\">#closed?</a></code>.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":51,"url":null},"def":{"name":"open?","visibility":"Public","body":"!closed?"}},{"html_id":"positions:Array(Position)-instance-method","name":"positions","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":7,"url":null},"def":{"name":"positions","return_type":"Array(Position)","visibility":"Public","body":"@positions"}},{"html_id":"ring?-instance-method","name":"ring?","doc":"Returns `true` if there are at least four positions and they are `#closed?`.","summary":"<p>Returns <code>true</code> if there are at least four positions and they are <code><a href=\"../WKB/LineString.html#closed%3F-instance-method\">#closed?</a></code>.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":56,"url":null},"def":{"name":"ring?","visibility":"Public","body":"@positions.size >= 4 && (@positions.first == @positions.last)"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":33,"url":null},"def":{"name":"size","visibility":"Public","body":"@positions.size"}},{"html_id":"to_coordinates:Array(Array(Float64))-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as a nested array.","summary":"<p>Returns a representation of coordinates as a nested array.</p>","abstract":false,"location":{"filename":"src/wkb/line_string.cr","line_number":41,"url":null},"def":{"name":"to_coordinates","return_type":"Array(Array(Float64))","visibility":"Public","body":"@positions.map(&.to_a)"}}]},{"html_id":"wkb/WKB/LineStringSequenceable","path":"WKB/LineStringSequenceable.html","kind":"module","full_name":"WKB::LineStringSequenceable","name":"LineStringSequenceable","abstract":false,"locations":[{"filename":"src/wkb/line_string_sequenceable.cr","line_number":5,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wkb/WKB/MultiLineString","kind":"struct","full_name":"WKB::MultiLineString","name":"MultiLineString"},{"html_id":"wkb/WKB/Polygon","kind":"struct","full_name":"WKB::Polygon","name":"Polygon"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(line_array:Array(Array(Array(Float64))),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"line_array","external_name":"line_array","restriction":"Array(Array(Array(Float64)))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(line_array : Array(Array(Array(Float64))), mode = Mode::XY, srid = 0)","args_html":"(line_array : Array(Array(Array(Float64))), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"line_array","external_name":"line_array","restriction":"Array(Array(Array(Float64)))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(line_array, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"children-instance-method","name":"children","abstract":false,"location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":23,"url":null},"def":{"name":"children","visibility":"Public","body":"@line_strings"}},{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":31,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@line_strings.empty?"}},{"html_id":"line_strings:Array(LineString)-instance-method","name":"line_strings","abstract":false,"location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":6,"url":null},"def":{"name":"line_strings","return_type":"Array(LineString)","visibility":"Public","body":"@line_strings"}},{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":27,"url":null},"def":{"name":"size","visibility":"Public","body":"@line_strings.size"}},{"html_id":"to_coordinates:Array(Array(Array(Float64)))-instance-method","name":"to_coordinates","abstract":false,"location":{"filename":"src/wkb/line_string_sequenceable.cr","line_number":35,"url":null},"def":{"name":"to_coordinates","return_type":"Array(Array(Array(Float64)))","visibility":"Public","body":"@line_strings.map do |line_string|\n  line_string.positions.map(&.to_a)\nend"}}]},{"html_id":"wkb/WKB/Mode","path":"WKB/Mode.html","kind":"enum","full_name":"WKB::Mode","name":"Mode","abstract":false,"ancestors":[{"html_id":"wkb/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wkb/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/mode.cr","line_number":2,"url":null}],"repository_name":"wkb","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"XY","name":"XY","value":"0"},{"id":"XYZ","name":"XYZ","value":"1"},{"id":"XYM","name":"XYM","value":"2"},{"id":"XYZM","name":"XYZM","value":"3"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"instance_methods":[{"html_id":"has_m?-instance-method","name":"has_m?","doc":"Returns `true` if the M coordinate is supported.","summary":"<p>Returns <code>true</code> if the M coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":26,"url":null},"def":{"name":"has_m?","visibility":"Public","body":"(self == Mode::XYM) || (self == Mode::XYZM)"}},{"html_id":"has_z?-instance-method","name":"has_z?","doc":"Returns `true` if the Z coordinate is supported.","summary":"<p>Returns <code>true</code> if the Z coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":21,"url":null},"def":{"name":"has_z?","visibility":"Public","body":"(self == Mode::XYZ) || (self == Mode::XYZM)"}},{"html_id":"has_zm?-instance-method","name":"has_zm?","doc":"Returns `true` if both Z and M coordinates are supported.","summary":"<p>Returns <code>true</code> if both Z and M coordinates are supported.</p>","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":31,"url":null},"def":{"name":"has_zm?","visibility":"Public","body":"self == Mode::XYZM"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of supported coordinates.","summary":"<p>Returns the number of supported coordinates.</p>","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":9,"url":null},"def":{"name":"size","visibility":"Public","body":"case self\nin .xy?\n  2\nin .xyz?, .xym?\n  3\nin .xyzm?\n  4\nend"}},{"html_id":"xy?-instance-method","name":"xy?","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":3,"url":null},"def":{"name":"xy?","visibility":"Public","body":"self == XY"}},{"html_id":"xym?-instance-method","name":"xym?","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":5,"url":null},"def":{"name":"xym?","visibility":"Public","body":"self == XYM"}},{"html_id":"xyz?-instance-method","name":"xyz?","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":4,"url":null},"def":{"name":"xyz?","visibility":"Public","body":"self == XYZ"}},{"html_id":"xyzm?-instance-method","name":"xyzm?","abstract":false,"location":{"filename":"src/wkb/mode.cr","line_number":6,"url":null},"def":{"name":"xyzm?","visibility":"Public","body":"self == XYZM"}}]},{"html_id":"wkb/WKB/MultiLineString","path":"WKB/MultiLineString.html","kind":"struct","full_name":"WKB::MultiLineString","name":"MultiLineString","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/WKB/LineStringSequenceable","kind":"module","full_name":"WKB::LineStringSequenceable","name":"LineStringSequenceable"},{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/multi_line_string.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wkb/WKB/LineStringSequenceable","kind":"module","full_name":"WKB::LineStringSequenceable","name":"LineStringSequenceable"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(MultiLineString)"}}],"instance_methods":[{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/multi_line_string.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::MultiLineString"}}]},{"html_id":"wkb/WKB/MultiPoint","path":"WKB/MultiPoint.html","kind":"struct","full_name":"WKB::MultiPoint","name":"MultiPoint","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/multi_point.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(point_array:Array(Array(Float64)),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"point_array","external_name":"point_array","restriction":"Array(Array(Float64))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(point_array : Array(Array(Float64)), mode = Mode::XY, srid = 0)","args_html":"(point_array : Array(Array(Float64)), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/multi_point.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"point_array","external_name":"point_array","restriction":"Array(Array(Float64))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(point_array, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(MultiPoint)"}}],"instance_methods":[{"html_id":"children:Array(WKB::Point)-instance-method","name":"children","doc":"Returns the object's child entities as an array.","summary":"<p>Returns the object's child entities as an array.</p>","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":21,"url":null},"def":{"name":"children","visibility":"Public","body":"@points"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if the object has no children.","summary":"<p>Returns <code>true</code> if the object has no children.</p>","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":29,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@points.empty?"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::MultiPoint"}},{"html_id":"points:Array(Point)-instance-method","name":"points","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":5,"url":null},"def":{"name":"points","return_type":"Array(Point)","visibility":"Public","body":"@points"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the size of the object's children.","summary":"<p>Returns the size of the object's children.</p>","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":25,"url":null},"def":{"name":"size","visibility":"Public","body":"@points.size"}},{"html_id":"to_coordinates:Array(Array(Float64))-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as a nested array.","summary":"<p>Returns a representation of coordinates as a nested array.</p>","abstract":false,"location":{"filename":"src/wkb/multi_point.cr","line_number":33,"url":null},"def":{"name":"to_coordinates","return_type":"Array(Array(Float64))","visibility":"Public","body":"@points.map(&.to_coordinates)"}}]},{"html_id":"wkb/WKB/MultiPolygon","path":"WKB/MultiPolygon.html","kind":"struct","full_name":"WKB::MultiPolygon","name":"MultiPolygon","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/multi_polygon.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(lines_arrays:Array(Array(Array(Array(Float64)))),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"lines_arrays","external_name":"lines_arrays","restriction":"Array(Array(Array(Array(Float64))))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(lines_arrays : Array(Array(Array(Array(Float64)))), mode = Mode::XY, srid = 0)","args_html":"(lines_arrays : Array(Array(Array(Array(Float64)))), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/multi_polygon.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"lines_arrays","external_name":"lines_arrays","restriction":"Array(Array(Array(Array(Float64))))"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(lines_arrays, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(MultiPolygon)"}}],"instance_methods":[{"html_id":"children:Array(WKB::Polygon)-instance-method","name":"children","doc":"Returns the object's child entities as an array.","summary":"<p>Returns the object's child entities as an array.</p>","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":15,"url":null},"def":{"name":"children","visibility":"Public","body":"@polygons"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if the object has no children.","summary":"<p>Returns <code>true</code> if the object has no children.</p>","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":23,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@polygons.empty?"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::MultiPolygon"}},{"html_id":"polygons:Array(Polygon)-instance-method","name":"polygons","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":5,"url":null},"def":{"name":"polygons","return_type":"Array(Polygon)","visibility":"Public","body":"@polygons"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the size of the object's children.","summary":"<p>Returns the size of the object's children.</p>","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":19,"url":null},"def":{"name":"size","visibility":"Public","body":"@polygons.size"}},{"html_id":"to_coordinates:Array(Array(Array(Array(Float64))))-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as a nested array.","summary":"<p>Returns a representation of coordinates as a nested array.</p>","abstract":false,"location":{"filename":"src/wkb/multi_polygon.cr","line_number":27,"url":null},"def":{"name":"to_coordinates","return_type":"Array(Array(Array(Array(Float64))))","visibility":"Public","body":"@polygons.map(&.to_coordinates)"}}]},{"html_id":"wkb/WKB/Object","path":"WKB/Object.html","kind":"struct","full_name":"WKB::Object","name":"Object","abstract":true,"superclass":{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":32,"url":null},{"filename":"src/wkb/object.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/GeometryCollection","kind":"struct","full_name":"WKB::GeometryCollection","name":"GeometryCollection"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"pull.read_begin_object\npull.read_object_key\ntype = pull.read_string\nbegin\n  kind = ObjectKind.parse(type)\nrescue ArgumentError\n  pull.raise(\"WKB does not support object type '#{type}'.\")\nend\nmode = Mode::XY\ncase kind\nwhen .geometry?\n  if pull.read_object_key != \"coordinates\"\n    pull.raise(\"Geometry must have a 'coordinates' object key.\")\n  end\n  case kind\n  when .point?\n    coordinates = Array(Float64).new(pull)\n    if coordinates.empty?\n    else\n      mode = WKB.mode_from_json_coord_elements(coordinates, pull)\n    end\n    object = Point.new(coordinates, mode)\n  when .line_string?, .multi_point?\n    coordinates = Array(Array(Float64)).new(pull)\n    if coordinates.empty?\n    else\n      mode = WKB.mode_from_json_coord_elements(coordinates.first, pull)\n    end\n    object = kind.line_string? ? LineString.new(coordinates, mode) : MultiPoint.new(coordinates, mode)\n  when .polygon?, .multi_line_string?\n    coordinates = Array(Array(Array(Float64))).new(pull)\n    if coordinates.empty?\n    else\n      mode = WKB.mode_from_json_coord_elements(coordinates.first.first, pull)\n    end\n    object = kind.multi_line_string? ? MultiLineString.new(coordinates, mode) : Polygon.new(coordinates, mode)\n  when .multi_polygon?\n    coordinates = Array(Array(Array(Array(Float64)))).new(pull)\n    if coordinates.empty?\n    else\n      mode = WKB.mode_from_json_coord_elements(coordinates.first.first.first, pull)\n    end\n    object = MultiPolygon.new(coordinates, mode)\n  else\n    raise(\"Unreachable code!\")\n  end\nwhen .geometry_collection?\n  if pull.read_object_key != \"geometries\"\n    pull.raise(\"Geometry Collection must have a 'geometries' object key.\")\n  end\n  geometries = Array(Geometry).new(pull)\n  if geometries.empty?\n  else\n    mode = geometries.first.mode\n  end\n  object = GeometryCollection.new(geometries, mode)\nelse\n  raise(\"Unreachable code!\")\nend\npull.read_end_object\nobject\n"}}],"instance_methods":[{"html_id":"children-instance-method","name":"children","doc":"Returns the object's child entities as an array.","summary":"<p>Returns the object's child entities as an array.</p>","abstract":true,"location":{"filename":"src/wkb/object.cr","line_number":26,"url":null},"def":{"name":"children","visibility":"Public","body":""}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if the object has no children.","summary":"<p>Returns <code>true</code> if the object has no children.</p>","abstract":true,"location":{"filename":"src/wkb/object.cr","line_number":30,"url":null},"def":{"name":"empty?","visibility":"Public","body":""}},{"html_id":"has_m?-instance-method","name":"has_m?","doc":"Returns `true` if the M coordinate is supported.","summary":"<p>Returns <code>true</code> if the M coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/object.cr","line_number":16,"url":null},"def":{"name":"has_m?","visibility":"Public","body":"@mode.has_m?"}},{"html_id":"has_z?-instance-method","name":"has_z?","doc":"Returns `true` if the Z coordinate is supported.","summary":"<p>Returns <code>true</code> if the Z coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/object.cr","line_number":11,"url":null},"def":{"name":"has_z?","visibility":"Public","body":"@mode.has_z?"}},{"html_id":"has_zm?-instance-method","name":"has_zm?","doc":"Returns `true` if both Z and M coordinates are supported.","summary":"<p>Returns <code>true</code> if both Z and M coordinates are supported.</p>","abstract":false,"location":{"filename":"src/wkb/object.cr","line_number":21,"url":null},"def":{"name":"has_zm?","visibility":"Public","body":"@mode.has_zm?"}},{"html_id":"mode:WKB::Mode-instance-method","name":"mode","doc":"Returns the object's coordinate mode.","summary":"<p>Returns the object's coordinate mode.</p>","abstract":false,"location":{"filename":"src/wkb/object.cr","line_number":6,"url":null},"def":{"name":"mode","visibility":"Public","body":"@mode"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the size of the object's children.","summary":"<p>Returns the size of the object's children.</p>","abstract":true,"location":{"filename":"src/wkb/object.cr","line_number":28,"url":null},"def":{"name":"size","visibility":"Public","body":""}},{"html_id":"srid:Int32-instance-method","name":"srid","doc":"Returns the object's SRID.","summary":"<p>Returns the object's SRID.</p>","abstract":false,"location":{"filename":"src/wkb/object.cr","line_number":8,"url":null},"def":{"name":"srid","visibility":"Public","body":"@srid"}},{"html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":true,"args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","args_html":"(builder : JSON::Builder)","location":{"filename":"src/wkb/geojson.cr","line_number":34,"url":null},"def":{"name":"to_json","args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"visibility":"Public","body":""}}]},{"html_id":"wkb/WKB/ObjectKind","path":"WKB/ObjectKind.html","kind":"enum","full_name":"WKB::ObjectKind","name":"ObjectKind","abstract":false,"ancestors":[{"html_id":"wkb/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wkb/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/object_kind.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Point","name":"Point","value":"1_u32"},{"id":"LineString","name":"LineString","value":"2_u32"},{"id":"Polygon","name":"Polygon","value":"3_u32"},{"id":"MultiPoint","name":"MultiPoint","value":"4_u32"},{"id":"MultiLineString","name":"MultiLineString","value":"5_u32"},{"id":"MultiPolygon","name":"MultiPolygon","value":"6_u32"},{"id":"GeometryCollection","name":"GeometryCollection","value":"7_u32"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Convenience enum that represents the respective object's\ntype numeric code in WKB.","summary":"<p>Convenience enum that represents the respective object's type numeric code in WKB.</p>","instance_methods":[{"html_id":"geometry?-instance-method","name":"geometry?","doc":"Returns `false` if the object is a `GeometryCollection`.","summary":"<p>Returns <code>false</code> if the object is a <code><a href=\"../WKB/ObjectKind.html#GeometryCollection\">GeometryCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":14,"url":null},"def":{"name":"geometry?","visibility":"Public","body":"self != ObjectKind::GeometryCollection"}},{"html_id":"geometry_collection?-instance-method","name":"geometry_collection?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":11,"url":null},"def":{"name":"geometry_collection?","visibility":"Public","body":"self == GeometryCollection"}},{"html_id":"line_string?-instance-method","name":"line_string?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":6,"url":null},"def":{"name":"line_string?","visibility":"Public","body":"self == LineString"}},{"html_id":"multi_line_string?-instance-method","name":"multi_line_string?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":9,"url":null},"def":{"name":"multi_line_string?","visibility":"Public","body":"self == MultiLineString"}},{"html_id":"multi_point?-instance-method","name":"multi_point?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":8,"url":null},"def":{"name":"multi_point?","visibility":"Public","body":"self == MultiPoint"}},{"html_id":"multi_polygon?-instance-method","name":"multi_polygon?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":10,"url":null},"def":{"name":"multi_polygon?","visibility":"Public","body":"self == MultiPolygon"}},{"html_id":"multipart?-instance-method","name":"multipart?","doc":"Returns `true` if the object's children are simple geometry objects.","summary":"<p>Returns <code>true</code> if the object's children are simple geometry objects.</p>","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":19,"url":null},"def":{"name":"multipart?","visibility":"Public","body":"case self\nwhen ObjectKind::MultiPoint, ObjectKind::MultiLineString, ObjectKind::MultiPolygon\n  true\nelse\n  false\nend"}},{"html_id":"point?-instance-method","name":"point?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":5,"url":null},"def":{"name":"point?","visibility":"Public","body":"self == Point"}},{"html_id":"polygon?-instance-method","name":"polygon?","abstract":false,"location":{"filename":"src/wkb/object_kind.cr","line_number":7,"url":null},"def":{"name":"polygon?","visibility":"Public","body":"self == Polygon"}}]},{"html_id":"wkb/WKB/Point","path":"WKB/Point.html","kind":"struct","full_name":"WKB::Point","name":"Point","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/point.cr","line_number":5,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(coordinates:Array(Float64),mode=Mode::XY,srid=0)-class-method","name":"new","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"args_string":"(coordinates : Array(Float64), mode = Mode::XY, srid = 0)","args_html":"(coordinates : Array(Float64), mode = <span class=\"t\">Mode</span><span class=\"t\">::</span><span class=\"t\">XY</span>, srid = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/point.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"mode","default_value":"Mode::XY","external_name":"mode","restriction":""},{"name":"srid","default_value":"0","external_name":"srid","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, mode, srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(Point)"}}],"instance_methods":[{"html_id":"children-instance-method","name":"children","doc":"Returns an array with the point's position or an empty array if the position is empty.","summary":"<p>Returns an array with the point's position or an empty array if the position is empty.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":38,"url":null},"def":{"name":"children","visibility":"Public","body":"@position.empty? ? [] of Position : [@position]"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns `true` if the point's position is empty.","summary":"<p>Returns <code>true</code> if the point's position is empty.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":43,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@position.empty?"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":5,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::Point"}},{"html_id":"m-instance-method","name":"m","doc":"Returns the M coordinate or `Float64::NAN` if empty or the mode has not M.","summary":"<p>Returns the M coordinate or <code>Float64::NAN</code> if empty or the mode has not M.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":33,"url":null},"def":{"name":"m","visibility":"Public","body":"@position.m"}},{"html_id":"position:Position-instance-method","name":"position","doc":"Returns the point's underlying position.","summary":"<p>Returns the point's underlying position.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":7,"url":null},"def":{"name":"position","return_type":"Position","visibility":"Public","body":"@position"}},{"html_id":"size-instance-method","name":"size","doc":"Returns `0` if the point's position is empty, `1` otherwise.","summary":"<p>Returns <code>0</code> if the point's position is empty, <code>1</code> otherwise.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":48,"url":null},"def":{"name":"size","visibility":"Public","body":"@position.empty? ? 0 : 1"}},{"html_id":"to_coordinates-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as an array.","summary":"<p>Returns a representation of coordinates as an array.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":53,"url":null},"def":{"name":"to_coordinates","visibility":"Public","body":"@position.to_coordinates"}},{"html_id":"x-instance-method","name":"x","doc":"Returns the X coordinate or `Float64::NAN` if empty.","summary":"<p>Returns the X coordinate or <code>Float64::NAN</code> if empty.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":18,"url":null},"def":{"name":"x","visibility":"Public","body":"@position.x"}},{"html_id":"y-instance-method","name":"y","doc":"Returns the Y coordinate or `Float64::NAN` if empty.","summary":"<p>Returns the Y coordinate or <code>Float64::NAN</code> if empty.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":23,"url":null},"def":{"name":"y","visibility":"Public","body":"@position.y"}},{"html_id":"z-instance-method","name":"z","doc":"Returns the Z coordinate or `Float64::NAN` if empty or the mode has not Z.","summary":"<p>Returns the Z coordinate or <code>Float64::NAN</code> if empty or the mode has not Z.</p>","abstract":false,"location":{"filename":"src/wkb/point.cr","line_number":28,"url":null},"def":{"name":"z","visibility":"Public","body":"@position.z"}}]},{"html_id":"wkb/WKB/Polygon","path":"WKB/Polygon.html","kind":"struct","full_name":"WKB::Polygon","name":"Polygon","abstract":false,"superclass":{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},"ancestors":[{"html_id":"wkb/WKB/LineStringSequenceable","kind":"module","full_name":"WKB::LineStringSequenceable","name":"LineStringSequenceable"},{"html_id":"wkb/WKB/Geometry","kind":"struct","full_name":"WKB::Geometry","name":"Geometry"},{"html_id":"wkb/WKB/Object","kind":"struct","full_name":"WKB::Object","name":"Object"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},{"filename":"src/wkb/polygon.cr","line_number":4,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wkb/WKB/LineStringSequenceable","kind":"module","full_name":"WKB::LineStringSequenceable","name":"LineStringSequenceable"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":144,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"(Object.new(pull)).as(Polygon)"}}],"instance_methods":[{"html_id":"exterior_ring:LineString-instance-method","name":"exterior_ring","doc":"Returns the polygon's first line string.","summary":"<p>Returns the polygon's first line string.</p>","abstract":false,"location":{"filename":"src/wkb/polygon.cr","line_number":13,"url":null},"def":{"name":"exterior_ring","return_type":"LineString","visibility":"Public","body":"@line_strings.first"}},{"html_id":"interior_rings:Array(LineString)-instance-method","name":"interior_rings","doc":"Returns a potentially empty array with the polygon's last line strings.","summary":"<p>Returns a potentially empty array with the polygon's last line strings.</p>","abstract":false,"location":{"filename":"src/wkb/polygon.cr","line_number":18,"url":null},"def":{"name":"interior_rings","return_type":"Array(LineString)","visibility":"Public","body":"@line_strings[1..]"}},{"html_id":"kind:ObjectKind-instance-method","name":"kind","abstract":false,"location":{"filename":"src/wkb/polygon.cr","line_number":4,"url":null},"def":{"name":"kind","return_type":"ObjectKind","visibility":"Public","body":"ObjectKind::Polygon"}},{"html_id":"rings:Array(WKB::LineString)-instance-method","name":"rings","doc":"Returns the polygon's child line strings.","summary":"<p>Returns the polygon's child line strings.</p>","abstract":false,"location":{"filename":"src/wkb/polygon.cr","line_number":8,"url":null},"def":{"name":"rings","visibility":"Public","body":"@line_strings"}}]},{"html_id":"wkb/WKB/Position","path":"WKB/Position.html","kind":"struct","full_name":"WKB::Position","name":"Position","abstract":false,"superclass":{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wkb/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"wkb/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"wkb/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"wkb/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wkb/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/geojson.cr","line_number":16,"url":null},{"filename":"src/wkb/position.cr","line_number":8,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wkb/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"A position is the base entity to represent coordinates in geometry objects.\n\nPositions are a thin wrapper around a slice of double precision floats,\nthey have a mode, and they can also be empty.","summary":"<p>A position is the base entity to represent coordinates in geometry objects.</p>","constructors":[{"html_id":"new(coordinates:Array(Float64),mode:Mode)-class-method","name":"new","doc":"Creates a position with the given _coordinates_ (which can be empty) and coordinate _mode_.\n\nNOTE: It raises `WKB::Error` if the number of coordinates does not agree with the mode.","summary":"<p>Creates a position with the given <em>coordinates</em> (which can be empty) and coordinate <em>mode</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"mode","external_name":"mode","restriction":"Mode"}],"args_string":"(coordinates : Array(Float64), mode : Mode)","args_html":"(coordinates : Array(Float64), mode : <a href=\"../WKB/Mode.html\">Mode</a>)","location":{"filename":"src/wkb/position.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"mode","external_name":"mode","restriction":"Mode"}],"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, mode)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/wkb/geojson.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"coordinates = Array(Float64).new(pull)\nmode = WKB.mode_from_json_coord_elements(coordinates, pull)\nPosition.new(coordinates, mode)\n"}}],"instance_methods":[{"html_id":"has_m?-instance-method","name":"has_m?","doc":"Returns `true` if the M coordinate is supported.","summary":"<p>Returns <code>true</code> if the M coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":72,"url":null},"def":{"name":"has_m?","visibility":"Public","body":"@mode.has_m?"}},{"html_id":"has_z?-instance-method","name":"has_z?","doc":"Returns `true` if the Z coordinate is supported.","summary":"<p>Returns <code>true</code> if the Z coordinate is supported.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":67,"url":null},"def":{"name":"has_z?","visibility":"Public","body":"@mode.has_z?"}},{"html_id":"has_zm?-instance-method","name":"has_zm?","doc":"Returns `true` if both Z and M coordinates are supported.","summary":"<p>Returns <code>true</code> if both Z and M coordinates are supported.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":77,"url":null},"def":{"name":"has_zm?","visibility":"Public","body":"@mode.has_zm?"}},{"html_id":"m-instance-method","name":"m","doc":"Returns the M coordinate or `Float64::NAN` if empty or the mode has not M.","summary":"<p>Returns the M coordinate or <code>Float64::NAN</code> if empty or the mode has not M.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":54,"url":null},"def":{"name":"m","visibility":"Public","body":"if @slice.empty?\n  Float64::NAN\nelse\n  if @mode.xyzm?\n    @slice[3]\n  else\n    if @mode.xym?\n      @slice[2]\n    else\n      Float64::NAN\n    end\n  end\nend"}},{"html_id":"mode:WKB::Mode-instance-method","name":"mode","doc":"Returns the position's coordinate mode.","summary":"<p>Returns the position's coordinate mode.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":13,"url":null},"def":{"name":"mode","visibility":"Public","body":"@mode"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of coordinates.","summary":"<p>Returns the number of coordinates.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":82,"url":null},"def":{"name":"size","visibility":"Public","body":"@slice.size"}},{"html_id":"slice:Slice(Float64)-instance-method","name":"slice","doc":"Returns the underlying slice of coordinates.","summary":"<p>Returns the underlying slice of coordinates.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":11,"url":null},"def":{"name":"slice","return_type":"Slice(Float64)","visibility":"Public","body":"@slice"}},{"html_id":"to_coordinates:Array(Float64)-instance-method","name":"to_coordinates","doc":"Returns a representation of coordinates as an array.","summary":"<p>Returns a representation of coordinates as an array.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":87,"url":null},"def":{"name":"to_coordinates","return_type":"Array(Float64)","visibility":"Public","body":"@slice.to_a"}},{"html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":"NOTE: It's necessary to require the GeoJSON extension after loading the library.","summary":"<p><span class=\"flag purple\">NOTE</span>  It's necessary to require the GeoJSON extension after loading the library.</p>","abstract":false,"args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","args_html":"(builder : JSON::Builder)","location":{"filename":"src/wkb/geojson.cr","line_number":25,"url":null},"def":{"name":"to_json","args":[{"name":"builder","external_name":"builder","restriction":"JSON::Builder"}],"visibility":"Public","body":"builder.array do\n  slice.each do |f|\n    builder.number(f)\n  end\nend"}},{"html_id":"x-instance-method","name":"x","doc":"Returns the X coordinate or `Float64::NAN` if empty.","summary":"<p>Returns the X coordinate or <code>Float64::NAN</code> if empty.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":35,"url":null},"def":{"name":"x","visibility":"Public","body":"@slice.empty? ? Float64::NAN : @slice[0]"}},{"html_id":"y-instance-method","name":"y","doc":"Returns the Y coordinate or `Float64::NAN` if empty.","summary":"<p>Returns the Y coordinate or <code>Float64::NAN</code> if empty.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":40,"url":null},"def":{"name":"y","visibility":"Public","body":"@slice.empty? ? Float64::NAN : @slice[1]"}},{"html_id":"z-instance-method","name":"z","doc":"Returns the Z coordinate or `Float64::NAN` if empty or the mode has not Z.","summary":"<p>Returns the Z coordinate or <code>Float64::NAN</code> if empty or the mode has not Z.</p>","abstract":false,"location":{"filename":"src/wkb/position.cr","line_number":45,"url":null},"def":{"name":"z","visibility":"Public","body":"if @slice.empty? || (!@mode.has_z?)\n  Float64::NAN\nelse\n  @slice[2]\nend"}}]},{"html_id":"wkb/WKB/TextDecoder","path":"WKB/TextDecoder.html","kind":"class","full_name":"WKB::TextDecoder","name":"TextDecoder","abstract":false,"superclass":{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/text_decoder.cr","line_number":12,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Textual decoder of well-known representations of geometry objects (WKT).\n\nWARNING: Decoding of EWKT with 3D and 4D coordinates is not supported.\n\nNOTE: All `#decode` metods raise  a `WKB::Error` if there was a\ndecoding error or if the geometry object is not valid.","summary":"<p>Textual decoder of well-known representations of geometry objects (WKT).</p>","constructors":[{"html_id":"new(default_srid:Int32=0)-class-method","name":"new","abstract":false,"args":[{"name":"default_srid","default_value":"0","external_name":"default_srid","restriction":"::Int32"}],"args_string":"(default_srid : Int32 = 0)","args_html":"(default_srid : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/wkb/text_decoder.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"default_srid","default_value":"0","external_name":"default_srid","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(default_srid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"decode(str:String):Object-instance-method","name":"decode","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Object","args_html":"(str : String) : <a href=\"../WKB/Object.html\">Object</a>","location":{"filename":"src/wkb/text_decoder.cr","line_number":30,"url":null},"def":{"name":"decode","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"Object","visibility":"Public","body":"@mutex.synchronize do\n  str = str.downcase\n  @scanner = StringScanner.new(str)\n  @current_mode = Mode::XY\n  @current_srid = @default_srid\n  if srid_match = (/^srid=(\\d+);/).match(str)\n    @current_srid = srid_match[1].to_i32\n    @scanner.offset = srid_match.end\n  else\n    @current_srid = @default_srid\n  end\n  next_token\n  read_single_object\nend"}},{"html_id":"default_srid:Int32-instance-method","name":"default_srid","abstract":false,"location":{"filename":"src/wkb/text_decoder.cr","line_number":13,"url":null},"def":{"name":"default_srid","return_type":"Int32","visibility":"Public","body":"@default_srid"}}]},{"html_id":"wkb/WKB/TextEncoder","path":"WKB/TextEncoder.html","kind":"class","full_name":"WKB::TextEncoder","name":"TextEncoder","abstract":false,"superclass":{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wkb/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wkb/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wkb/text_encoder.cr","line_number":6,"url":null}],"repository_name":"wkb","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wkb/WKB","kind":"module","full_name":"WKB","name":"WKB"},"doc":"Textual encoder of well-known representations of geometry objects.","summary":"<p>Textual encoder of well-known representations of geometry objects.</p>","constructors":[{"html_id":"new(flavor:WKB::Flavor=Flavor::Basic)-class-method","name":"new","abstract":false,"args":[{"name":"flavor","default_value":"Flavor::Basic","external_name":"flavor","restriction":"::WKB::Flavor"}],"args_string":"(flavor : WKB::Flavor = Flavor::Basic)","args_html":"(flavor : <a href=\"../WKB/Flavor.html\">WKB::Flavor</a> = <span class=\"t\">Flavor</span><span class=\"t\">::</span><span class=\"t\">Basic</span>)","location":{"filename":"src/wkb/text_encoder.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"flavor","default_value":"Flavor::Basic","external_name":"flavor","restriction":"::WKB::Flavor"}],"visibility":"Public","body":"_ = allocate\n_.initialize(flavor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"encode(object:Object,io:IO):Nil-instance-method","name":"encode","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Object"},{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(object : Object, io : IO) : Nil","args_html":"(object : <a href=\"../WKB/Object.html\">Object</a>, io : IO) : Nil","location":{"filename":"src/wkb/text_encoder.cr","line_number":12,"url":null},"def":{"name":"encode","args":[{"name":"object","external_name":"object","restriction":"Object"},{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"write_single_object(object, io)"}},{"html_id":"encode(object:Object):String-instance-method","name":"encode","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"Object"}],"args_string":"(object : Object) : String","args_html":"(object : <a href=\"../WKB/Object.html\">Object</a>) : String","location":{"filename":"src/wkb/text_encoder.cr","line_number":16,"url":null},"def":{"name":"encode","args":[{"name":"object","external_name":"object","restriction":"Object"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  write_single_object(object, io)\nend"}},{"html_id":"flavor:Flavor-instance-method","name":"flavor","abstract":false,"location":{"filename":"src/wkb/text_encoder.cr","line_number":7,"url":null},"def":{"name":"flavor","return_type":"Flavor","visibility":"Public","body":"@flavor"}}]}]}]}})